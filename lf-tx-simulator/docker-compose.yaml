version: '3.7'
services:
  ibmmq:
    # image: quay.io/ibmcase/ibm-mqadvanced-server-dev:9.2.4.0-amd64
    image: icr.io/ibm-messaging/mq
    #image: ibm-mqadvanced-server-dev:9.3-lts-amd64
    container_name: ibmmq
    hostname: ibmmq
    ports:
        - '1414:1414'
        - '9443:9443'
        - '9157:9157'
        - '5672:5672'
    volumes:
        - qm1data:/mnt/mqm
    stdin_open: true
    tty: true
    restart: always
    environment:
        LICENSE: accept
        MQ_QMGR_NAME: QM1
        MQ_APP_PASSWORD: passw0rd
        MQ_ENABLE_METRICS: "true"
    healthcheck:
      test: ["CMD", "sh", "-c", "tail -n 5 /var/mqm/qmgrs/QM1/errors/amqp_0.log | grep 'AMQP Service started successfully'"]
      interval: 2s
      retries: 20
  zookeeper:
    image: cp.icr.io/cp/ibm-eventstreams-kafka:11.0.2
    container_name: zookeeper
    hostname: zookeeper
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs
  kafka:
    image: cp.icr.io/cp/ibm-eventstreams-kafka:11.0.2
    container_name: kafka
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} \
      --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} \
      --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} \
      --override inter.broker.listener.name=$${KAFKA_INTER_BROKER_LISTENER_NAME} \
      --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:9092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: EXTERNAL://0.0.0.0:9092,INTERNAL://kafka:29092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  
  addTopics:
    image:  cp.icr.io/cp/ibm-eventstreams-kafka:11.0.2
    container_name: addTopics
    depends_on:
      - kafka
    entrypoint: [ "bash",  "-c", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create  --replication-factor 1 --partitions 1 --topic lf-raw-tx 
            && /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create  --replication-factor 1 --partitions 1 --topic lf-dlq 
            && /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create  --replication-factor 1 --partitions 1 --topic lf-tx-a
            && /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create  --replication-factor 1 --partitions 1 --topic lf-categories
            && /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create  --replication-factor 1 --partitions 1 --topic lf-tx-b"]
  kconnect: 
    hostname: kconnect
    container_name: kconnect
    image: quay.io/ibmcase/eda-kconnect-cluster-image
    ports:
      - 8083:8083
    volumes:
      - ./e2e/kconnect:/tmp
    command: [
      "sh", "-c",
      "export LOG_DIR=/tmp &&
      bin/connect-standalone.sh /tmp/standalone.properties /tmp/mq-source.properties"
    ]
    depends_on:
      - kafka
      - ibmmq
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - kafka
volumes:
  qm1data: